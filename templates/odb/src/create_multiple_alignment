[% PERL %]
  
use Mbl;
use CGI qw(:all);
use CGI::Pretty;
use Bio::Seq;
use Bio::SeqIO;
use Bio::Tools::Run::Alignment::Clustalw;
use Bio::Tools::Run::Alignment::Muscle;
use Bio::AlignIO;
use Bio::DB::GenPept;
use IO::String;
use File::Temp qw/ tempfile tempdir /;
  
use strict;
   
my $mbl = Mbl::new(path_info(), param('organism'));

my $dbh = $mbl->dbh();

my $session_id = $stash->get('session_id');

my %session;
#%session = %{$mbl->get_session(cookie('SESSION_ID'), \%session)};
        tie %session, "Apache::Session::File", $session_id, {
                Directory => $mbl->session_tmp_dir,
        };
 


my $gb = new Bio::DB::GenPept();

my %seq_hash;

# Get the Orf that started this alignment
foreach my $orfid(param('orf'))
{
	if($mbl->check_orf_existance($orfid))
	{
		$seq_hash{'orf_' . $orfid} = $mbl->get_orf_aa_sequence($orfid);
	}
}

# Check for supplied genome orfs
my @gorfs = split(",", param('gorfs'));

foreach my $orfid(@gorfs)
{
	$orfid =~ s/\ //g;
	if($mbl->check_orf_existance($orfid))
	{
		$seq_hash{'orf_' . $orfid} = $mbl->get_orf_aa_sequence($orfid);
	}
}


# Get any sequences that were included
if(param('SEQUENCE'))
{
	my $stringio_sequence = IO::String->new(param('SEQUENCE'));
	my $other_seqs;
	eval {$other_seqs = Bio::SeqIO->new( '-fh' =>$stringio_sequence);};
	if($@)
	{
		die "<h2>Sequences provided not in Fasta Format!</h2>";
	} else
	{
		
		while(my $input = $other_seqs->next_seq())
		{
			if($input->seq =~ /\d/)
			{
			} else
			{
				$seq_hash{$input->display_id()} = $input->seq;
			}
		}
	}

}


my @seq_notfound;
# Get a list of the accessions that were checked
foreach my $acc (param('accessions'))
{
	my $seq = $mbl->get_genbank_seq($acc);
	if($seq)
	{
		my $desc = $seq->description();
		$desc = substr($desc, 0, 35);
		$desc =~ s/^\s+//;
		$desc =~ s/\s+$//;
		$desc = $acc . " " . $desc;
		$desc =~ s/\s+/_/g;
		$seq_hash{$desc} = $seq->seq();
	} else {
		push (@seq_notfound, $acc);
	}
	
}

# Create an array of sequence objects

my @seq_array;
while(my ($key, $val) = each(%seq_hash) )
{
	my $seq = Bio::Seq->new( -seq=> $val, -id=>$key);
	push(@seq_array, $seq);
}

my $seq_array_ref = \@seq_array;

if(param('submit') eq 'Create Multiple Alignment')
{
	my $out_type = param('format');
	if($out_type eq 'jalview')
	{
		$out_type = 'clustalw';
	}
	# Create alignment
	my @params = ('ktuple' => 2, 'matrix' => 'BLOSUM', 'OUTPUT'=>'GCG');
	my $factory = Bio::Tools::Run::Alignment::Clustalw->new(@params);
#	my $factory = Bio::Tools::Run::Alignment::Muscle->new();
#	$factory->quiet(1);


	my $str;
	my $aln = $factory->align($seq_array_ref);
	if(!$aln)
	{
		print '<center><p><font size="+4" color="red"><b>Multiple Sequence Alignment</b></font></p></center>', hr;

		print b("Alignment Failed!"),p;
	} else
	{
		my $out = IO::String->new(\$str);
		my $ioout = Bio::AlignIO->new(-format=> $out_type, -fh => $out );
		$ioout->write_aln($aln);

		if(param('format') eq 'jalview')
		{
	                # we must first create a temporary file
	                my ($fh, $filename) = tempfile( TEMPLATE => 'tempXXXXX',
	                        DIR => $mbl->gmodweb_html_tmp_sys_dir,
	                        SUFFIX => '.dat');
	                my ($wsfh, $wsfilename) = tempfile( TEMPLATE => 'tempXXXXX',
	                        DIR => $mbl->gmodweb_html_tmp_sys_dir,
	                        SUFFIX => '.jnlp');
	                print $fh $str;
	
	        my @datfilename = split('/',$filename);
	        my $datlen = scalar @datfilename;
	        my $datfilename = $datfilename[$datlen-1];

	        my @webstartfilename = split('/',$wsfilename);
	        my $webstartlen = scalar @webstartfilename;
	        my $webstart = $webstartfilename[$webstartlen-1];


	print $wsfh '<?xml version="1.0" encoding="utf-8"?>
<jnlp spec="1.0+"
      codebase="http://ccgb.umn.edu/software/java"
      href="';
print $wsfh 'http://' . $mbl->organism_web_server . $mbl->gmodweb_html_tmp_web_dir . '/' . $webstart;
print $wsfh '">
  <information>
    <title>Jalview Application</title>
    <vendor>Computational Biology Center, University of Minnesota</vendor>
    <homepage href="http://circinus.ebi.ac.uk:6543/jalview/contents.html"/>
    <description>Jalview </description>
    <description kind="short">Multiple alignments of Protein sequences.</description>
    <icon href="../Images/hydconssm.gif"/>
  </information>
  <security>
    <all-permissions/>
  </security>
  <resources>
    <j2se version="1.4+"/>
    <j2se version="1.3+"/>
    <j2se version="1.2+"/>
    <jar href="lib/jalview.jar"/>
    <property name="jalview.alignment" value="jalview/INTRLEUKIN.aln"/>
  </resources>
  <application-desc main-class="jalview.AlignFrame">
    <argument>';
	print $wsfh 'http://' . $mbl->organism_web_server . $mbl->gmodweb_html_tmp_web_dir . '/'  . $datfilename;
	print $wsfh '</argument>
    <argument>URL</argument>
    <argument>CLUSTAL</argument>
  </application-desc>
</jnlp>
';
		print "<a href=\"" . $mbl->gmodweb_html_tmp_web_dir . "/$webstart\">Click here to start JalView</a> Multiple Sequence Alignment Viewer.<br><p>";
	
		} else
		{
	
			print '<center><p><font size="+4" color="red"><b>Multiple Sequence Alignment</b></font></p></center>', hr;
		
	
			print "Create Tree(Not yet)<br>";	

			print "<h4>Multiple Alignment: ";
			print $mbl->orf_link(param('orf'));
			print "</h4>";
			print "<br>";
			print "Percent Identity : " . $aln->percentage_identity . "<br>\n";
			print "Length : " . $aln->length . "<br>\n";
			print "Number Sequences : " . $aln->no_sequences . "<br>\n";
			print "Number Residues : " . $aln->no_residues . "<br><br>\n"; 
			print "-------Cut below here for alignment file-------<br>\n";
			print "<pre>";
			print $str;
			print "</pre>";
		}
	} # End If Alignment Failed

} elsif(param('submit') eq 'Download Sequences')
{
	print '<center><p><font size="+4" color="red"><b>Sequence Download</b></font></p></center>', hr;

	print "<pre>";
	foreach my $seq (@seq_array)
	{
		my $string;
		my $stringio = IO::String->new($string);
		my $out = Bio::SeqIO->new('-fh'=>$stringio, '-format'=>'fasta');
		$out->write_seq($seq);
		print $string ;
	}
	
	print "</pre>";

	if (scalar @seq_notfound > 0) {
		print "<p><hr><br>Unable to locate some sequences in GenBank: ";
		foreach my $acc (@seq_notfound)
		{
			print $acc . " ";
		}
		print '<p>';
	}
}

untie(%session);

[% END %]
